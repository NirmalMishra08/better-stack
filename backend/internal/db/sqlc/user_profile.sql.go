// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO user_profile (user_id, is_premium, stripe_id, name, bio)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, is_premium, stripe_id, name, bio, created_at, updated_at
`

type CreateUserProfileParams struct {
	UserID    pgtype.UUID `json:"user_id"`
	IsPremium pgtype.Bool `json:"is_premium"`
	StripeID  pgtype.Text `json:"stripe_id"`
	Name      pgtype.Text `json:"name"`
	Bio       pgtype.Text `json:"bio"`
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, createUserProfile,
		arg.UserID,
		arg.IsPremium,
		arg.StripeID,
		arg.Name,
		arg.Bio,
	)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsPremium,
		&i.StripeID,
		&i.Name,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT id, user_id, is_premium, stripe_id, name, bio, created_at, updated_at FROM user_profile 
WHERE user_id = $1
`

func (q *Queries) GetUserProfile(ctx context.Context, userID pgtype.UUID) (UserProfile, error) {
	row := q.db.QueryRow(ctx, getUserProfile, userID)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsPremium,
		&i.StripeID,
		&i.Name,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePremiumStatus = `-- name: UpdatePremiumStatus :one
UPDATE user_profile 
SET is_premium = $2, stripe_id = $3, updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
RETURNING id, user_id, is_premium, stripe_id, name, bio, created_at, updated_at
`

type UpdatePremiumStatusParams struct {
	UserID    pgtype.UUID `json:"user_id"`
	IsPremium pgtype.Bool `json:"is_premium"`
	StripeID  pgtype.Text `json:"stripe_id"`
}

func (q *Queries) UpdatePremiumStatus(ctx context.Context, arg UpdatePremiumStatusParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, updatePremiumStatus, arg.UserID, arg.IsPremium, arg.StripeID)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsPremium,
		&i.StripeID,
		&i.Name,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE user_profile 
SET 
    name = COALESCE($2, name),
    bio = COALESCE($3, bio),
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
RETURNING id, user_id, is_premium, stripe_id, name, bio, created_at, updated_at
`

type UpdateUserProfileParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Name   pgtype.Text `json:"name"`
	Bio    pgtype.Text `json:"bio"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, updateUserProfile, arg.UserID, arg.Name, arg.Bio)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsPremium,
		&i.StripeID,
		&i.Name,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
