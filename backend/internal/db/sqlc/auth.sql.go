// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash) VALUES ($1, $2) RETURNING id, phone, email, fullname, provider, password_hash, role, profile_status, created_at, updated_at
`

type CreateUserParams struct {
	Email        string      `json:"email"`
	PasswordHash pgtype.Text `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Email,
		&i.Fullname,
		&i.Provider,
		&i.PasswordHash,
		&i.Role,
		&i.ProfileStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOrCreateUser = `-- name: FindOrCreateUser :one
INSERT INTO users (email, provider, phone, fullname, password_hash, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
ON CONFLICT (email)
DO UPDATE SET
    phone = COALESCE(NULLIF(EXCLUDED.phone, ''), users.phone),
    provider = EXCLUDED.provider,
    fullname = COALESCE(NULLIF(EXCLUDED.fullname, ''), users.fullname),
    password_hash = EXCLUDED.password_hash,
    updated_at = NOW()
RETURNING id, email, fullname, password_hash, phone, role, provider
`

type FindOrCreateUserParams struct {
	Email        string      `json:"email"`
	Provider     Provider    `json:"provider"`
	Phone        pgtype.Text `json:"phone"`
	Fullname     string      `json:"fullname"`
	PasswordHash pgtype.Text `json:"password_hash"`
}

type FindOrCreateUserRow struct {
	ID           uuid.UUID   `json:"id"`
	Email        string      `json:"email"`
	Fullname     string      `json:"fullname"`
	PasswordHash pgtype.Text `json:"password_hash"`
	Phone        pgtype.Text `json:"phone"`
	Role         UserRole    `json:"role"`
	Provider     Provider    `json:"provider"`
}

func (q *Queries) FindOrCreateUser(ctx context.Context, arg FindOrCreateUserParams) (FindOrCreateUserRow, error) {
	row := q.db.QueryRow(ctx, findOrCreateUser,
		arg.Email,
		arg.Provider,
		arg.Phone,
		arg.Fullname,
		arg.PasswordHash,
	)
	var i FindOrCreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Fullname,
		&i.PasswordHash,
		&i.Phone,
		&i.Role,
		&i.Provider,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, phone, email, fullname, provider, password_hash, role, profile_status, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Email,
		&i.Fullname,
		&i.Provider,
		&i.PasswordHash,
		&i.Role,
		&i.ProfileStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, phone, email, fullname, provider, password_hash, role, profile_status, created_at, updated_at FROM users 
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Email,
		&i.Fullname,
		&i.Provider,
		&i.PasswordHash,
		&i.Role,
		&i.ProfileStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users 
SET password_hash = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID           uuid.UUID   `json:"id"`
	PasswordHash pgtype.Text `json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}
