// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: monitor.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMonitor = `-- name: CreateMonitor :one
INSERT INTO monitors (user_id, url, method, type, interval, status, is_active, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, now(), now())
RETURNING id, user_id, url, method, type, interval, status, is_active, created_at, updated_at
`

type CreateMonitorParams struct {
	UserID   pgtype.UUID       `json:"user_id"`
	Url      string            `json:"url"`
	Method   pgtype.Text       `json:"method"`
	Type     pgtype.Text       `json:"type"`
	Interval int32             `json:"interval"`
	Status   NullMonitorStatus `json:"status"`
	IsActive pgtype.Bool       `json:"is_active"`
}

func (q *Queries) CreateMonitor(ctx context.Context, arg CreateMonitorParams) (Monitor, error) {
	row := q.db.QueryRow(ctx, createMonitor,
		arg.UserID,
		arg.Url,
		arg.Method,
		arg.Type,
		arg.Interval,
		arg.Status,
		arg.IsActive,
	)
	var i Monitor
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Method,
		&i.Type,
		&i.Interval,
		&i.Status,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMonitor = `-- name: DeleteMonitor :exec
DELETE FROM monitors 
WHERE id = $1 AND user_id = $2
`

type DeleteMonitorParams struct {
	ID     int32       `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteMonitor(ctx context.Context, arg DeleteMonitorParams) error {
	_, err := q.db.Exec(ctx, deleteMonitor, arg.ID, arg.UserID)
	return err
}

const getActiveMonitors = `-- name: GetActiveMonitors :many
SELECT id, user_id, url, method, type, interval, status, is_active, created_at, updated_at FROM monitors 
WHERE is_active = true
AND user_id = $1
`

func (q *Queries) GetActiveMonitors(ctx context.Context, userID pgtype.UUID) ([]Monitor, error) {
	rows, err := q.db.Query(ctx, getActiveMonitors, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Monitor{}
	for rows.Next() {
		var i Monitor
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Method,
			&i.Type,
			&i.Interval,
			&i.Status,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonitorByID = `-- name: GetMonitorByID :one
SELECT id, user_id, url, method, type, interval, status, is_active, created_at, updated_at FROM monitors 
WHERE id = $1 AND user_id = $2
`

type GetMonitorByIDParams struct {
	ID     int32       `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetMonitorByID(ctx context.Context, arg GetMonitorByIDParams) (Monitor, error) {
	row := q.db.QueryRow(ctx, getMonitorByID, arg.ID, arg.UserID)
	var i Monitor
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Method,
		&i.Type,
		&i.Interval,
		&i.Status,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMonitorByIdandURL = `-- name: GetMonitorByIdandURL :one
SELECT id, user_id, url, method, type, interval, status, is_active, created_at, updated_at FROM monitors
where user_id = $1 AND url = $2
`

type GetMonitorByIdandURLParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Url    string      `json:"url"`
}

func (q *Queries) GetMonitorByIdandURL(ctx context.Context, arg GetMonitorByIdandURLParams) (Monitor, error) {
	row := q.db.QueryRow(ctx, getMonitorByIdandURL, arg.UserID, arg.Url)
	var i Monitor
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Method,
		&i.Type,
		&i.Interval,
		&i.Status,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserMonitors = `-- name: GetUserMonitors :many
SELECT id, user_id, url, method, type, interval, status, is_active, created_at, updated_at FROM monitors 
WHERE user_id = $1 
ORDER BY created_at DESC
`

func (q *Queries) GetUserMonitors(ctx context.Context, userID pgtype.UUID) ([]Monitor, error) {
	rows, err := q.db.Query(ctx, getUserMonitors, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Monitor{}
	for rows.Next() {
		var i Monitor
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Method,
			&i.Type,
			&i.Interval,
			&i.Status,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleMonitor = `-- name: ToggleMonitor :one
UPDATE monitors 
SET is_active = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, url, method, type, interval, status, is_active, created_at, updated_at
`

type ToggleMonitorParams struct {
	ID       int32       `json:"id"`
	UserID   pgtype.UUID `json:"user_id"`
	IsActive pgtype.Bool `json:"is_active"`
}

func (q *Queries) ToggleMonitor(ctx context.Context, arg ToggleMonitorParams) (Monitor, error) {
	row := q.db.QueryRow(ctx, toggleMonitor, arg.ID, arg.UserID, arg.IsActive)
	var i Monitor
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Method,
		&i.Type,
		&i.Interval,
		&i.Status,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMonitor = `-- name: UpdateMonitor :one
UPDATE monitors 
SET 
    url = COALESCE($2, url),
    method = COALESCE($3, method),
    type = COALESCE($4, type),
    interval = COALESCE($5, interval),
    status = COALESCE($6, status),
    is_active = COALESCE($7, is_active),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $8
RETURNING id, user_id, url, method, type, interval, status, is_active, created_at, updated_at
`

type UpdateMonitorParams struct {
	ID       int32             `json:"id"`
	Url      string            `json:"url"`
	Method   pgtype.Text       `json:"method"`
	Type     pgtype.Text       `json:"type"`
	Interval int32             `json:"interval"`
	Status   NullMonitorStatus `json:"status"`
	IsActive pgtype.Bool       `json:"is_active"`
	UserID   pgtype.UUID       `json:"user_id"`
}

func (q *Queries) UpdateMonitor(ctx context.Context, arg UpdateMonitorParams) (Monitor, error) {
	row := q.db.QueryRow(ctx, updateMonitor,
		arg.ID,
		arg.Url,
		arg.Method,
		arg.Type,
		arg.Interval,
		arg.Status,
		arg.IsActive,
		arg.UserID,
	)
	var i Monitor
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Method,
		&i.Type,
		&i.Interval,
		&i.Status,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMonitorStatus = `-- name: UpdateMonitorStatus :one
UPDATE monitors 
SET status = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, url, method, type, interval, status, is_active, created_at, updated_at
`

type UpdateMonitorStatusParams struct {
	ID     int32             `json:"id"`
	Status NullMonitorStatus `json:"status"`
}

func (q *Queries) UpdateMonitorStatus(ctx context.Context, arg UpdateMonitorStatusParams) (Monitor, error) {
	row := q.db.QueryRow(ctx, updateMonitorStatus, arg.ID, arg.Status)
	var i Monitor
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Method,
		&i.Type,
		&i.Interval,
		&i.Status,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
