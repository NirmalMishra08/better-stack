// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type MonitorStatus string

const (
	MonitorStatusUp      MonitorStatus = "up"
	MonitorStatusDown    MonitorStatus = "down"
	MonitorStatusUnknown MonitorStatus = "unknown"
	MonitorStatusPending MonitorStatus = "pending"
)

func (e *MonitorStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MonitorStatus(s)
	case string:
		*e = MonitorStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MonitorStatus: %T", src)
	}
	return nil
}

type NullMonitorStatus struct {
	MonitorStatus MonitorStatus `json:"monitor_status"`
	Valid         bool          `json:"valid"` // Valid is true if MonitorStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMonitorStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MonitorStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MonitorStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMonitorStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MonitorStatus), nil
}

type ProfileStatus string

const (
	ProfileStatusPENDING   ProfileStatus = "PENDING"
	ProfileStatusCOMPLETED ProfileStatus = "COMPLETED"
)

func (e *ProfileStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProfileStatus(s)
	case string:
		*e = ProfileStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ProfileStatus: %T", src)
	}
	return nil
}

type NullProfileStatus struct {
	ProfileStatus ProfileStatus `json:"profile_status"`
	Valid         bool          `json:"valid"` // Valid is true if ProfileStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProfileStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ProfileStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProfileStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProfileStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProfileStatus), nil
}

type Provider string

const (
	ProviderEmail     Provider = "email"
	ProviderGooglecom Provider = "google.com"
	ProviderApple     Provider = "apple"
	ProviderPassword  Provider = "password"
)

func (e *Provider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Provider(s)
	case string:
		*e = Provider(s)
	default:
		return fmt.Errorf("unsupported scan type for Provider: %T", src)
	}
	return nil
}

type NullProvider struct {
	Provider Provider `json:"provider"`
	Valid    bool     `json:"valid"` // Valid is true if Provider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProvider) Scan(value interface{}) error {
	if value == nil {
		ns.Provider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Provider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Provider), nil
}

type UserRole string

const (
	UserRoleADMIN UserRole = "ADMIN"
	UserRoleUSER  UserRole = "USER"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type UserStatus string

const (
	UserStatusHttp    UserStatus = "http"
	UserStatusPing    UserStatus = "ping"
	UserStatusPending UserStatus = "pending"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus `json:"user_status"`
	Valid      bool       `json:"valid"` // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type Alert struct {
	ID             int32            `json:"id"`
	MonitorID      pgtype.Int4      `json:"monitor_id"`
	AlertContactID pgtype.Int4      `json:"alert_contact_id"`
	AlertType      string           `json:"alert_type"`
	Message        string           `json:"message"`
	SentAt         pgtype.Timestamp `json:"sent_at"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
}

type AlertContact struct {
	ID         int32            `json:"id"`
	UserID     pgtype.UUID      `json:"user_id"`
	Name       string           `json:"name"`
	Email      string           `json:"email"`
	IsVerified pgtype.Bool      `json:"is_verified"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
}

type Analytic struct {
	ID               int32            `json:"id"`
	MonitorID        pgtype.Int4      `json:"monitor_id"`
	UptimePercentage pgtype.Float8    `json:"uptime_percentage"`
	AvgResponseTime  pgtype.Float8    `json:"avg_response_time"`
	Last24hDowntime  pgtype.Int4      `json:"last_24h_downtime"`
	UpdatedAt        pgtype.Timestamp `json:"updated_at"`
}

type Monitor struct {
	ID        int32             `json:"id"`
	UserID    pgtype.UUID       `json:"user_id"`
	Url       string            `json:"url"`
	Method    pgtype.Text       `json:"method"`
	Type      pgtype.Text       `json:"type"`
	Interval  int32             `json:"interval"`
	Status    NullMonitorStatus `json:"status"`
	IsActive  pgtype.Bool       `json:"is_active"`
	CreatedAt pgtype.Timestamp  `json:"created_at"`
	UpdatedAt pgtype.Timestamp  `json:"updated_at"`
}

type MonitorAlertConfig struct {
	ID              int32            `json:"id"`
	MonitorID       pgtype.Int4      `json:"monitor_id"`
	AlertContactID  pgtype.Int4      `json:"alert_contact_id"`
	AlertOnUp       pgtype.Bool      `json:"alert_on_up"`
	AlertOnDown     pgtype.Bool      `json:"alert_on_down"`
	AlertOnSlow     pgtype.Bool      `json:"alert_on_slow"`
	SlowThresholdMs pgtype.Int4      `json:"slow_threshold_ms"`
	IsActive        pgtype.Bool      `json:"is_active"`
	CreatedAt       pgtype.Timestamp `json:"created_at"`
}

type MonitorLog struct {
	ID            int32            `json:"id"`
	MonitorID     pgtype.Int4      `json:"monitor_id"`
	StatusCode    pgtype.Int4      `json:"status_code"`
	ResponseTime  pgtype.Float8    `json:"response_time"`
	DnsOk         pgtype.Bool      `json:"dns_ok"`
	SslOk         pgtype.Bool      `json:"ssl_ok"`
	ContentOk     pgtype.Bool      `json:"content_ok"`
	ScreenshotUrl pgtype.Text      `json:"screenshot_url"`
	CheckedAt     pgtype.Timestamp `json:"checked_at"`
}

type Subscription struct {
	ID         int32            `json:"id"`
	UserID     pgtype.UUID      `json:"user_id"`
	StripePlan pgtype.Text      `json:"stripe_plan"`
	IsActive   pgtype.Bool      `json:"is_active"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
}

type User struct {
	ID            uuid.UUID          `json:"id"`
	Phone         pgtype.Text        `json:"phone"`
	Email         string             `json:"email"`
	Fullname      string             `json:"fullname"`
	Provider      Provider           `json:"provider"`
	PasswordHash  pgtype.Text        `json:"password_hash"`
	Role          UserRole           `json:"role"`
	ProfileStatus NullProfileStatus  `json:"profile_status"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
}

type UserProfile struct {
	ID        int32            `json:"id"`
	UserID    pgtype.UUID      `json:"user_id"`
	IsPremium pgtype.Bool      `json:"is_premium"`
	StripeID  pgtype.Text      `json:"stripe_id"`
	Name      pgtype.Text      `json:"name"`
	Bio       pgtype.Text      `json:"bio"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}
