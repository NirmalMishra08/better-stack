// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: alert_contact.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAlertContact = `-- name: CreateAlertContact :one
INSERT INTO alert_contacts (user_id, name, email)
VALUES ($1, $2, $3)
RETURNING id, user_id, name, email, is_verified, created_at
`

type CreateAlertContactParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Name   string      `json:"name"`
	Email  string      `json:"email"`
}

func (q *Queries) CreateAlertContact(ctx context.Context, arg CreateAlertContactParams) (AlertContact, error) {
	row := q.db.QueryRow(ctx, createAlertContact, arg.UserID, arg.Name, arg.Email)
	var i AlertContact
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.IsVerified,
		&i.CreatedAt,
	)
	return i, err
}

const createMonitorAlertConfig = `-- name: CreateMonitorAlertConfig :one
INSERT INTO monitor_alert_configs (monitor_id, alert_contact_id, alert_on_up, alert_on_down, alert_on_slow, slow_threshold_ms)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, monitor_id, alert_contact_id, alert_on_up, alert_on_down, alert_on_slow, slow_threshold_ms, is_active, created_at
`

type CreateMonitorAlertConfigParams struct {
	MonitorID       pgtype.Int4 `json:"monitor_id"`
	AlertContactID  pgtype.Int4 `json:"alert_contact_id"`
	AlertOnUp       pgtype.Bool `json:"alert_on_up"`
	AlertOnDown     pgtype.Bool `json:"alert_on_down"`
	AlertOnSlow     pgtype.Bool `json:"alert_on_slow"`
	SlowThresholdMs pgtype.Int4 `json:"slow_threshold_ms"`
}

func (q *Queries) CreateMonitorAlertConfig(ctx context.Context, arg CreateMonitorAlertConfigParams) (MonitorAlertConfig, error) {
	row := q.db.QueryRow(ctx, createMonitorAlertConfig,
		arg.MonitorID,
		arg.AlertContactID,
		arg.AlertOnUp,
		arg.AlertOnDown,
		arg.AlertOnSlow,
		arg.SlowThresholdMs,
	)
	var i MonitorAlertConfig
	err := row.Scan(
		&i.ID,
		&i.MonitorID,
		&i.AlertContactID,
		&i.AlertOnUp,
		&i.AlertOnDown,
		&i.AlertOnSlow,
		&i.SlowThresholdMs,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getAlertContactByID = `-- name: GetAlertContactByID :one
SELECT id, user_id, name, email, is_verified, created_at FROM alert_contacts
WHERE id = $1
`

func (q *Queries) GetAlertContactByID(ctx context.Context, id int32) (AlertContact, error) {
	row := q.db.QueryRow(ctx, getAlertContactByID, id)
	var i AlertContact
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.IsVerified,
		&i.CreatedAt,
	)
	return i, err
}

const getAlertContactsByMonitor = `-- name: GetAlertContactsByMonitor :many
SELECT ac.id, ac.user_id, ac.name, ac.email, ac.is_verified, ac.created_at FROM alert_contacts ac
JOIN monitor_alert_configs mac ON ac.id = mac.alert_contact_id
WHERE mac.monitor_id = $1 AND mac.is_active = true
`

func (q *Queries) GetAlertContactsByMonitor(ctx context.Context, monitorID pgtype.Int4) ([]AlertContact, error) {
	rows, err := q.db.Query(ctx, getAlertContactsByMonitor, monitorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AlertContact{}
	for rows.Next() {
		var i AlertContact
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Email,
			&i.IsVerified,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlertContactsByUserID = `-- name: GetAlertContactsByUserID :many
SELECT id, user_id, name, email, is_verified, created_at FROM alert_contacts
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetAlertContactsByUserID(ctx context.Context, userID pgtype.UUID) ([]AlertContact, error) {
	rows, err := q.db.Query(ctx, getAlertContactsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AlertContact{}
	for rows.Next() {
		var i AlertContact
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Email,
			&i.IsVerified,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonitorAlertConfigs = `-- name: GetMonitorAlertConfigs :many
SELECT id, monitor_id, alert_contact_id, alert_on_up, alert_on_down, alert_on_slow, slow_threshold_ms, is_active, created_at FROM monitor_alert_configs 
WHERE monitor_id = $1 AND is_active = true
`

func (q *Queries) GetMonitorAlertConfigs(ctx context.Context, monitorID pgtype.Int4) ([]MonitorAlertConfig, error) {
	rows, err := q.db.Query(ctx, getMonitorAlertConfigs, monitorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MonitorAlertConfig{}
	for rows.Next() {
		var i MonitorAlertConfig
		if err := rows.Scan(
			&i.ID,
			&i.MonitorID,
			&i.AlertContactID,
			&i.AlertOnUp,
			&i.AlertOnDown,
			&i.AlertOnSlow,
			&i.SlowThresholdMs,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMonitorAlertConfig = `-- name: UpdateMonitorAlertConfig :one
UPDATE monitor_alert_configs 
SET alert_on_up = $2, alert_on_down = $3, alert_on_slow = $4, slow_threshold_ms = $5
WHERE id = $1
RETURNING id, monitor_id, alert_contact_id, alert_on_up, alert_on_down, alert_on_slow, slow_threshold_ms, is_active, created_at
`

type UpdateMonitorAlertConfigParams struct {
	ID              int32       `json:"id"`
	AlertOnUp       pgtype.Bool `json:"alert_on_up"`
	AlertOnDown     pgtype.Bool `json:"alert_on_down"`
	AlertOnSlow     pgtype.Bool `json:"alert_on_slow"`
	SlowThresholdMs pgtype.Int4 `json:"slow_threshold_ms"`
}

func (q *Queries) UpdateMonitorAlertConfig(ctx context.Context, arg UpdateMonitorAlertConfigParams) (MonitorAlertConfig, error) {
	row := q.db.QueryRow(ctx, updateMonitorAlertConfig,
		arg.ID,
		arg.AlertOnUp,
		arg.AlertOnDown,
		arg.AlertOnSlow,
		arg.SlowThresholdMs,
	)
	var i MonitorAlertConfig
	err := row.Scan(
		&i.ID,
		&i.MonitorID,
		&i.AlertContactID,
		&i.AlertOnUp,
		&i.AlertOnDown,
		&i.AlertOnSlow,
		&i.SlowThresholdMs,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}
