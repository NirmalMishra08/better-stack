// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: alert.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAlert = `-- name: CreateAlert :one
INSERT INTO alerts (monitor_id, alert_type, message)
VALUES ($1, $2, $3)
RETURNING id, monitor_id, alert_type, message, sent_at, created_at
`

type CreateAlertParams struct {
	MonitorID pgtype.Int4 `json:"monitor_id"`
	AlertType pgtype.Text `json:"alert_type"`
	Message   pgtype.Text `json:"message"`
}

func (q *Queries) CreateAlert(ctx context.Context, arg CreateAlertParams) (Alert, error) {
	row := q.db.QueryRow(ctx, createAlert, arg.MonitorID, arg.AlertType, arg.Message)
	var i Alert
	err := row.Scan(
		&i.ID,
		&i.MonitorID,
		&i.AlertType,
		&i.Message,
		&i.SentAt,
		&i.CreatedAt,
	)
	return i, err
}

const getMonitorAlerts = `-- name: GetMonitorAlerts :many
SELECT id, monitor_id, alert_type, message, sent_at, created_at FROM alerts 
WHERE monitor_id = $1 
ORDER BY sent_at DESC 
LIMIT $2
`

type GetMonitorAlertsParams struct {
	MonitorID pgtype.Int4 `json:"monitor_id"`
	Limit     int32       `json:"limit"`
}

func (q *Queries) GetMonitorAlerts(ctx context.Context, arg GetMonitorAlertsParams) ([]Alert, error) {
	rows, err := q.db.Query(ctx, getMonitorAlerts, arg.MonitorID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Alert{}
	for rows.Next() {
		var i Alert
		if err := rows.Scan(
			&i.ID,
			&i.MonitorID,
			&i.AlertType,
			&i.Message,
			&i.SentAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentAlerts = `-- name: GetRecentAlerts :many
SELECT a.id, a.monitor_id, a.alert_type, a.message, a.sent_at, a.created_at, m.url, m.user_id
FROM alerts a
JOIN monitors m ON a.monitor_id = m.id
WHERE m.user_id = $1
ORDER BY a.sent_at DESC 
LIMIT $2
`

type GetRecentAlertsParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
}

type GetRecentAlertsRow struct {
	ID        int32            `json:"id"`
	MonitorID pgtype.Int4      `json:"monitor_id"`
	AlertType pgtype.Text      `json:"alert_type"`
	Message   pgtype.Text      `json:"message"`
	SentAt    pgtype.Timestamp `json:"sent_at"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	Url       string           `json:"url"`
	UserID    pgtype.UUID      `json:"user_id"`
}

func (q *Queries) GetRecentAlerts(ctx context.Context, arg GetRecentAlertsParams) ([]GetRecentAlertsRow, error) {
	rows, err := q.db.Query(ctx, getRecentAlerts, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRecentAlertsRow{}
	for rows.Next() {
		var i GetRecentAlertsRow
		if err := rows.Scan(
			&i.ID,
			&i.MonitorID,
			&i.AlertType,
			&i.Message,
			&i.SentAt,
			&i.CreatedAt,
			&i.Url,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
