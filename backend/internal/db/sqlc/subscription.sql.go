// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subscription.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (user_id, stripe_plan, is_active)
VALUES ($1, $2, $3)
RETURNING id, user_id, stripe_plan, is_active, created_at
`

type CreateSubscriptionParams struct {
	UserID     pgtype.UUID `json:"user_id"`
	StripePlan pgtype.Text `json:"stripe_plan"`
	IsActive   pgtype.Bool `json:"is_active"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, createSubscription, arg.UserID, arg.StripePlan, arg.IsActive)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripePlan,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const deactivateSubscription = `-- name: DeactivateSubscription :exec
UPDATE subscriptions 
SET is_active = false 
WHERE user_id = $1
`

func (q *Queries) DeactivateSubscription(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deactivateSubscription, userID)
	return err
}

const getUserSubscription = `-- name: GetUserSubscription :one
SELECT id, user_id, stripe_plan, is_active, created_at FROM subscriptions 
WHERE user_id = $1 
ORDER BY created_at DESC 
LIMIT 1
`

func (q *Queries) GetUserSubscription(ctx context.Context, userID pgtype.UUID) (Subscription, error) {
	row := q.db.QueryRow(ctx, getUserSubscription, userID)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripePlan,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const updateSubscription = `-- name: UpdateSubscription :one
UPDATE subscriptions 
SET 
    stripe_plan = COALESCE($2, stripe_plan),
    is_active = COALESCE($3, is_active)
WHERE user_id = $1
RETURNING id, user_id, stripe_plan, is_active, created_at
`

type UpdateSubscriptionParams struct {
	UserID     pgtype.UUID `json:"user_id"`
	StripePlan pgtype.Text `json:"stripe_plan"`
	IsActive   pgtype.Bool `json:"is_active"`
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, updateSubscription, arg.UserID, arg.StripePlan, arg.IsActive)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripePlan,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}
